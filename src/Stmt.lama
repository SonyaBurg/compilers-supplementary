-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c.fst;
  var world = c.snd;
  case stmt of
    Assn (a, expr) -> [state <- [a, evalExpr(state, expr)], world]
  | Seq  (stm1, stm2)  -> eval(eval(c, stm1), stm2)
  | Read (s) -> (
    var new_world = readWorld(world);
    [state <- [s, new_world.fst], new_world.snd]
  )
  | Write (e)          -> [state, writeWorld(evalExpr(state, e), world)] 
  | Skip               -> c
  | If (expr, stmt1, stmt2) -> if evalExpr(state, expr) then eval(c, stmt1) else eval(c, stmt2) fi
  | While   (expr, stmt)  ->  if evalExpr (state, expr) then eval (eval (c, stmt), While (expr, stmt))
                              else c
                              fi
        -- while case c of [state, world] -> evalExpr(expr) esac do c := eval(c, stmt) od; c
  | DoWhile (stmt, expr) -> eval(eval(c, stmt), While(expr, stmt)) -- do c := eval(c, stmt) while case c of [state, world] -> evalExpr(expr) esac od; c
 esac
 }

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
