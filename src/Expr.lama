-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addVariables (scopes, defs) {
  case defs of 
    {}  -> scopes
    | Var (name) : other_defs -> addNames (addVariables(scopes, other_defs), name)
    | Fun (name, arg, body) : other_defs -> addFunction (addVariables(scopes, other_defs), name, arg, body)
  esac
}

fun addValues(state, args, vals) {
  fun myAddName(s, [x, v]) {
    addName(s, x, v)
  }
  foldl(myAddName, state, zip(args, vals))
}

(* Assignment *)
fun eval (c@[s, w], expr) {
   case expr of
    Assn    (e1, e2)             -> case eval(c, e2) of [c, exp2] -> case eval(c, e1) of [[s, w], exp1] -> [[s <- [exp1, exp2], w], exp2] esac esac 
  | Seq     (e1, e2)             -> case eval(c, e1) of [c, _] -> eval(c, e2) esac
  | Skip                         -> [c, 0]
  | Read    (x)                  -> case readWorld(w) of [v, w] -> [[s <- [x, v], w], Void] esac
  | Write   (expr)               -> case eval(c, expr) of [[s, w], v] -> [[s, writeWorld(v, w)], Void] esac
  | If      (cnd, e1, e2)        -> case eval(c, cnd) of [c, 0] -> eval(c, e2) | [c, _] -> eval(c, e1) esac
  | While   (cnd, expr)          -> case eval(c, cnd) of
                                      [c, 0] -> [c, Void]
                                    | [c, _] -> eval(c, Seq (expr, While (cnd, expr)))
                                  esac
  | DoWhile (expr, cnd)          -> eval(c, Seq(expr, While(cnd, expr)))
  | Var     (x)                  -> [c, lookup(s, x)]         
  | Ref     (x)                  -> [c, x]             
  | Const   (x)                  -> [c, x]                
  | Binop   (op, e1, e2)         -> case evalList(c, {e1, e2}) of [c, {exp1, exp2}] -> [c, evalOp(op, exp1, exp2)] esac
  | Ignore  (expr)               -> case eval(c, expr) of [c, w] -> [c, 0] esac
  | Scope   (d, e)               -> case eval([addVariables(enterScope(s), d), w], e) of [[s, w], exp] -> [[leaveScope(s), w], exp] esac
  | Call    (name, args)         -> case lookup(s, name) of
                                      Fun(args2, body) -> case evalList(c, args) of
                                        [[bs, w], vals] -> case enterFunction(bs) of
                                          as -> case addValues(as, args2, vals) of
                                            as -> case eval([as, w], body) of
                                              [[as, w], v] -> [[leaveFunction(bs, getGlobal(as)), w], v]
                                            esac
                                          esac
                                        esac
                                      esac
                                    esac
  | exp -> failure("Evaluation of %s is not implemented\n", exp.string)
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
