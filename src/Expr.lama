-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun getOp(o, x, y) {
  case o of
    "+"  -> x + y
  | "*"  -> x * y 
  | "/"  -> x / y
  | "-"  -> x - y
  | "%"  -> x % y 
  | "<"  -> x < y
  | "<=" -> x <= y
  | ">"  -> x > y
  | ">=" -> x >= y
  | "==" -> x == y
  | "!=" -> x != y
  | "!!" -> x !! y
  | "&&" -> x && y
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Const (x) -> x
    | Var   (a) -> st(a)
    | Binop (a, e1, e2) -> getOp(a, evalExpr(st, e1), evalExpr(st, e2))
  esac
}
