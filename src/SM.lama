-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun evalI(c@[st, s, w], i) { -- stack + config
    case i of
      READ      -> case readWorld(w) of
                    [n, w] -> [n:st, s, w]
                   esac
    | WRITE     -> case st of
                    x:st -> [st, s, writeWorld(x, w)]
                   esac
    | BINOP (op) -> case st of
                    x:y:st -> [getOp(op, y, x) : st, s, w]
                   esac
    | LD    (x) -> [s(x) : st, s, w]
    | ST    (x) -> case st of
                    n:st -> [st, s <- [x, n], w]
                   esac
    | CONST (n) -> [n:st, s, w]
    esac
  }
  foldl(evalI, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (y) -> singletonBuffer(LD (y))
  | Const (n) -> singletonBuffer(CONST (n))
  | Binop (op, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileStmt (stmt) {
  case stmt of
    Assn (a, expr) -> compileExpr(expr) <+ ST(a)
  | Seq (stmt1, stmt2) -> compileStmt(stmt1) <+> compileStmt(stmt2)
  | Read (s) -> singletonBuffer(READ) <+ ST (s)
  | Write (s) -> compileExpr(s) <+ WRITE
  | Skip -> emptyBuffer()
  esac
}
getBuffer(compileStmt(stmt))
}
-- printf("%s\n", compileSM(stmt).string);