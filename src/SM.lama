-- -- Stack machine.

-- import Array;
-- import List;
-- import Fun;
-- import Collection;
-- import World;
-- import State;
-- import Expr;
-- import Buffer;
-- import Fun;

-- -- Stack code printer. Takes a list of SM instructions, return its
-- -- string representation.
-- public fun showSMInsn (i) {
--   case i of
--     READ         -> "READ"
--   | WRITE        -> "WRITE"
--   | BINOP (s)    -> sprintf ("BINOP %s", s)
--   | LD    (x)    -> sprintf ("LD %s", x)
--   | LDA   (x)    -> sprintf ("LDA %s", x)
--   | ST    (x)    -> sprintf ("ST %s", x)
--   | STI          -> "STI"
--   | CONST (n)    -> sprintf ("CONST %d", n)
--   | LABEL (s)    -> sprintf ("LABEL %s", s)
--   | JMP   (l)    -> sprintf ("JMP %s", l)
--   | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
--   | DUP          -> "DUP"
--   | DROP         -> "DROP"  
--   esac
-- }

-- public fun showSM (prg) {
--   map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
-- }

-- -- Evaluation environment: keeps a mapping between labels and (sub)programs
-- fun initEvalEnv (insns) {
--   var map =
--     fix (fun (rec) {
--           fun ([m, insns]) {
--             case insns of
--               {}               -> m
--             | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
--             | _ : tl           -> rec ([m, tl])
--             esac
--           }
--         }) $ [emptyMap (compare), insns];
  
--   [fun (l) {
--      case findMap (map, l) of Some (insns) -> insns esac
--   }]
-- }

-- -- Accessor function
-- fun fromLabel (env, lab) {
--   env [0] (lab)
-- }

-- -- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- -- returns a final configuration
-- fun eval (env, c, insns) {
--   failure ("SM eval not implemented\n")
-- }

-- -- Runs a stack machine for a given input and a given program, returns an output
-- public fun evalSM (input, insns) {
--   eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
-- }

-- -- Compilation environment: generates labels
-- fun makeCompEnv (n) {
--   [fun () {
--      [sprintf ("L%d", n), makeCompEnv (n+1)]
--   }]
-- }

-- fun initCompEnv () {
--   makeCompEnv (0)
-- }

-- -- Accessor function: generates one label
-- fun genLabel (env) {
--   env [0] ()
-- }

-- -- Utility function: generates n labels
-- fun genLabels (env, n) {
--   fun inner (env, n) {
--     if n == 0
--     then {env}
--     else case env.genLabel of
--            [lab, env] -> lab : inner (env, n-1)
--          esac
--     fi
--   }

--   listArray (inner (env, n))
-- }

-- -- Compiles an expression into a stack machine code.
-- -- Takes an expression, returns a list of stack machine
-- -- instructions.
-- public fun compileSM (stmt) {
--   fun label (lab, labUsed) {
--     if labUsed
--     then singletonBuffer (LABEL (lab))
--     else emptyBuffer ()
--     fi
--   }
  
--   fun compile (lab, env, stmt) {
--     case stmt of
--       Skip              -> [false, env, emptyBuffer ()]
--     | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
--     | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
--     | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
--     | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST(x)]
--     | Write   (e)       -> case env.genLabel of [label, env] ->
--                             case compile (label, env, e) of [used, env, code] -> 
--                               [false, env, code <+> label(label, used) <+ WRITE]
--                             esac
--                           esac
--     | Seq (s1, s2) -> case env.genLabel of
--           [s2Lab, env] ->
--              case compile (s2Lab, env, s1) of
--                [s2LabUsed, env, s1Code] ->
--                   case compile (lab, env, s2) of
--                     [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
--                   esac
--              esac
--         esac
--     | Binop (op, e1, e2) -> case env.genLabels(2) of 
--         [e1Label, e2Label, env1] ->
--           case compile(e1Label, env1, e1) of 
--             [e1LabelUsed, env2, e1Compiled] ->
--               case compile(e2Label, env2, e2) of 
--                 [e2LabelUsed, env3, e2Compiled] ->
--                   [false, env3, e1Compiled 
--                                 <+> label(e1Label, e1LabelUsed) 
--                                 <+> e2Compiled 
--                                 <+> label(e2Label, e2LabelUsed) 
--                                 <+ BINOP(op)]
--               esac
--           esac 
--       esac

--     | Assn (x, e) -> 
--       case genLabels(env, 2) of 
--         [xLabel, eLabel, env] -> 
--           case compile(xLabel, env, x) of 
--             [xLabelUsed, env, xCompiled] -> 
--               case compile (eLabel, env, e) of 
--                 [eLabelUsed, env, eCompiled] -> 
--                   [false, env, xCompiled <+> label(xLabel, xLabelUsed) <+> eCompiled <+> label(eLabel, eLabelUsed) <+ STI]
--               esac
--           esac
--       esac
      
--     | If (e, s1, s2) ->
--       case env.genLabels(2) of [label1, label2, env] -> 
--             case compile(label1, env, e) of [label1Used, env, compiledExp] -> case compile(lab, env, s1) of 
--                [_, env, s1Compiled] -> 
--                   case compile(lab, env, s2) of 
--                     [_, env, s2compiled] -> 
--                       [true, env, compiledExp <+>
--                                   label(label1, label1Used) 
--                                   <+ CJMP("z", label2) 
--                                   <+> s1Compiled
--                                   <+ JMP(lab)
--                                   <+> label(label2, true)
--                                   <+> s2compiled]
--                   esac
--               esac
--           esac
--       esac
--     | While (e, s) -> case genLabels(env, 2) of 
--         [beforeExpLabel, beforeStLabel , env] -> 
--           case compile(beforeStLabel, env, e) of 
--             [beforeStLabelUsed, env, expCompiled] -> 
--               case compile(beforeExpLabel, env, s) of 
--                 [_, env, stCompiled] -> 
--                   [true, env, label(beforeExpLabel, true) 
--                               <+> expCompiled
--                               <+ CJMP("z", lab)
--                               <+> label(beforeStLabel, beforeStLabelUsed)
--                               <+> stCompiled
--                               <+ JMP(beforeExpLabel)]
--               esac
--           esac
--       esac

--     | DoWhile (s, e) ->  case genLabels(env, 2) of 
--         [beforeStLabel, beforeExpLabel, env] -> 
--           case compile(beforeStLabel, env, e) of 
--             [beforeExpLabelUsed, env, expCompiled] -> 
--               case compile(beforeExpLabel, env, s) of 
--                 [_, env, stCompiled] -> 
--                   [false, env, label(beforeStLabel, true)
--                                <+> stCompiled
--                                <+> label(beforeExpLabel, beforeExpLabelUsed)
--                                <+> expCompiled
--                                <+ CJMP("nz", beforeStLabel) ]
--               esac
--           esac
--       esac
--     | Ignore (e) -> 
--         case genLabel(env) of 
--           [eLabel, env] -> 
--             case compile(eLabel, env, e) of 
--               [eLabelUsed, env, eCompiled] -> 
--                 [false, env, eCompiled <+> label(eLabel, eLabelUsed) <+ DROP]
--             esac
--         esac
--     esac
--   }

--   case initCompEnv ().genLabel of
--     [endLab, env] ->
--        case compile (endLab, env, stmt) of
--          [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
--        esac
--   esac
-- }


-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  var res = [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }];
  -- printf("initEvalEnv res: %s\n", res);
  res
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, conf@[st, s, w], insns) {
    -- printf("Trying to eval insns: %s\n\twith conf: %s\n", insns.string, conf.string);
    case insns of 
    {} -> conf
    | ins:tail -> 
      -- printf("Trying to match ins: %s\n", ins.string);
      case ins of 
        READ -> case readWorld(w) of 
                [n, w] -> eval(env, [n:st, s, w], tail)
              esac
        | WRITE -> case st of 
                    n:st -> eval(env, [st, s, writeWorld(n, w)], tail)
                  esac
        | BINOP (op) -> case st of 
                      x:y:st -> eval(env, [evalOp(op, y, x) : st, s, w], tail)
                      esac
        | LD (x) -> eval(env, [s(x):st, s, w], tail)
        | ST (x) -> case st of 
                      n:st -> eval(env, [st, s <- [x, n], w], tail)
                    esac
        | CONST (n) -> eval(env, [n:st, s, w], tail)
        | LABEL (_) -> eval(env, conf, tail)
        | JMP (l) -> eval(env, conf, env.fromLabel(l))
        | CJMP (cond, l) -> case cond of 
            "z" ->  case st of 
                      n:st -> eval(env, [st, s, w], if n == 0 then env.fromLabel(l) else tail fi)
                    esac
            | "nz" -> case st of 
                        n:st -> eval(env, [st, s, w], if n != 0 then env.fromLabel(l) else tail fi)
                      esac
          esac
        | LDA (x) -> eval(env, [x:st, s, w], tail)
        | STI ->  case st of 
                    a:b:st -> eval(env, [a:st, s <- [b, a], w], tail)
                  esac
        | DROP -> case st of 
                    a:st -> eval(env, [st, s, w], tail)
                  esac
        | DUP ->  case st of
                    a:st -> eval(env, [a:a:st, s, w], tail)
                  esac
      esac
    | other -> printf("Found strange value: %s\n", other)
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("EvalSM with insns: %s\n", insns.string);
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    -- printf("Trying to compile stmt: %s\n", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> 
        case env.genLabel of [lab, env] ->
          case compile (lab, env, e) of [labUsed, env, code] -> 
            [false, env, code <+> label(lab, labUsed) <+ WRITE]
          esac
        esac
    | Assn (x, e) -> case env.genLabel of [lab2, env] ->
        case env.genLabel of [lal, env] ->
          case compile (lab2, env, x) of [lab2Used, env, code1] ->
            case compile (lab, env, e) of [labUsed, env, code2] -> 
              [false, env, code1 <+> label(lab2, lab2Used) <+> code2 <+> label(lab, labUsed) <+ STI]
            esac
          esac
        esac
        esac
    | Seq (s1, s2) -> case env.genLabel of [lab2, env] ->
          case compile (lab2, env, s1) of [lab2Used, env, code1] ->
            case compile (lab, env, s2) of[labUsed, env, code2] -> 
              [labUsed, env, code1 <+> label (lab2, lab2Used) <+> code2]
            esac
          esac
        esac
    | If (cnd, branch1, branch2) -> 
        case env.genLabel of [lab1, env] ->
        case env.genLabel of [lab2, env] ->
          case compile(lab1, env, cnd) of [lab1Used, env, cndcode] ->
            case compile(lab, env, branch1) of [_, env, code1] ->
              case compile(lab, env, branch2) of [_, env, code2] ->
                  [true, env, cndcode <+> label(lab1, lab1Used) <+ CJMP("z", lab2) <+> code1 <+ JMP(lab) <+ LABEL(lab2) <+> code2]
              esac
            esac
          esac
        esac
        esac
    | While (cnd, st) -> 
      case genLabels(env, 2) of [lab1, lab2 , env] -> 
          case compile(lab2, env, cnd) of 
            [lab2Used, env, cndcode] -> 
              case compile(lab1, env, st) of 
                [_, env, stcode] -> 
                  [true, env, label(lab1, true) <+> cndcode <+ CJMP("z", lab) <+> label(lab2, lab2Used) <+> stcode <+ JMP(lab1)]
              esac
          esac
      esac
    | DoWhile (st, cnd) -> 
      case genLabels(env, 2) of 
        [lab1, lab2, env] -> 
          case compile(lab1, env, cnd) of 
            [lab2Used, env, cndcode] -> 
              case compile(lab2, env, st) of 
                [_, env, stcode] -> [false, env, label(lab1, true) <+> stcode <+> label(lab2, lab2Used) <+> cndcode <+ CJMP("nz", lab1) ]
              esac
          esac
      esac
    | Ignore (exp) -> 
        case genLabel(env) of 
          [lab1, env] -> 
            case compile(lab1, env, exp) of 
              [lab1Used, env, eCompiled] -> [false, env, eCompiled <+> label(lab1, lab1Used) <+ DROP]
            esac
        esac
    | Binop (op, e1, e2) ->
      case env.genLabels(2) of 
        [lab1, lab2, env1] ->
          case compile(lab1, env1, e1) of 
            [lab1Used, env2, code1] ->
              case compile(lab2, env2, e2) of 
                [lab2Used, env3, code2] ->
                  [false, env3, code1 <+> label(lab1, lab1Used) <+> code2 <+> label(lab2, lab2Used) <+ BINOP(op)]
              esac
          esac 
      esac
    | op -> failure ("compileSM not implemented for op: %s\n", op.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}