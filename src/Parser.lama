-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopDummy (l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta  expr (
      {
        [Left , {[s ("!!") , binopDummy]}],
        [Left , {[s ("&&") , binopDummy]}],
        [Nona, {[s ("==") , binopDummy], [s ("!=") , binopDummy],
                [s ("<=") , binopDummy], [s ("<") , binopDummy],
                [s (">=") , binopDummy], [s (">") , binopDummy]}],
        [Left , {[s ("+") , binopDummy], [s ("-") , binopDummy]}],
        [Left , {[s ("*") , binopDummy], [s ("/") , binopDummy], [s ("%") , binopDummy]}]
      } 
      , primary);

var simpleStmt = memo $ eta syntax (
    kSkip { Skip } |
    kWrite e=inbr[s("("), exp, s(")")] { Write (e) } |
    kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
    x=lident s[":="] e=exp { Assn (x, e) }
);

var stmt = memo $ eta syntax (
  s1=simpleStmt { s1 } | s1=simpleStmt s[";"] s2=stmt { Seq (s1, s2) }
); 

-- Public top-level parser
public parse = stmt;
             
